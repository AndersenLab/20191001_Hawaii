# Create flag to track if lat and long come from record or photo
dplyr::mutate(collection_lat_long_method = ifelse(is.na(latitude), "fulcrum", "photo")) %>%
# In cases where lat/lon are not available from photo set to collection_fulcrum_latitude and collection_fulcrum_longitude
dplyr::mutate(latitude = ifelse(is.na(latitude), collection_fulcrum_latitude, latitude)) %>%
dplyr::mutate(longitude = ifelse(is.na(longitude), collection_fulcrum_longitude, longitude)) %>%
#dplyr::mutate_at(.vars = vars(dplyr::starts_with("gps")),
#                 .funs = funs(as.numeric)) %>%
dplyr::rename(fulcrum_altitude = gps_altitude) %>%
dplyr::mutate(worms_on_sample = ifelse(is.na(worms_on_sample), "?", worms_on_sample)) %>%
dplyr::filter(!is.na(c_label)) %>%
dplyr::select(-assigned_to,
-status,
-Artist) %>%
# Calculate the Haversine distance between fulcrum record_latitude and record_longitue and photo latitude and longitude
dplyr::rowwise() %>%
dplyr::mutate(collection_lat_long_method_diff = geosphere::distHaversine(c(longitude, latitude),
c(collection_fulcrum_longitude, collection_fulcrum_latitude)),
# adjust collection_lat_long_method_diff to NA if there is only a fulcrum GPS postion
collection_lat_long_method_diff = ifelse(collection_lat_long_method == "fulcrum", NA, collection_lat_long_method_diff)) %>%
# rename the latitude and longitude to include 'collection_' prefix
dplyr::ungroup() %>%
dplyr::rename(collection_latitude = latitude,
collection_longitude = longitude,
collection_local_time = time)
# In 9 instances there were two separate isolation records for the same c_label.
# selecting to retain the isolation record based on worm presence. Yes > tracks > no.
# If both isolation records indicate "tracks only" or "no" then we retain the earliest record.
# In no cases did both isolation records indicate worms were present on c_label.
duplicated_isolations_to_remove <- c("5535470e-d82d-4ca4-ac77-860ea62c51c1",
"340dbd85-7b9a-4ecb-be5f-ac1ef944e057",
"88a12c25-a129-45e0-9306-c3a232b33552",
"8ad23d90-c0b8-4aa1-b135-f2d1fead94d4",
"036a80ac-3372-4c3c-b40d-edfa0a9d68cc",
"6dbecd43-e4e3-405f-b4dc-e757ad4449a5",
"6fa1a690-ea42-49a7-b86d-e7181b9f68bf",
"90f59eb1-abf8-4e7a-8ebc-d3148527b831",
"cee218c8-aad0-4e1b-9a04-0b084439cfab")
df1 <- df1 %>%
dplyr::filter(!isolation_id %in% duplicated_isolations_to_remove)
df2 <- readr::read_csv("data/fulcrum/nematode_isolation_s_labeled_plates.csv") %>%
dplyr::select(fulcrum_parent_id, s_label) %>%
dplyr::full_join(df1, by = c("fulcrum_parent_id" = "isolation_id")) %>% # this used to be a left join
dplyr::select(-fulcrum_parent_id, -updated_by, -version, -geometry, -gps_horizontal_accuracy,
-gps_vertical_accuracy, -gps_speed, -gps_course, -ExposureTime,
-Aperture, -BrightnessValue, -FOV, -altitude) %>%
# set S-labels to NA if isolation entry is 'no plates' there is 1 instance of this.
dplyr::mutate(s_label = ifelse(s_label == "no plates", NA, s_label))
# OPTIONAL: remove duplicated s_label
df2 <- df2 %>%
# add a count of row number to grouping variable to remove duplicate s_label (S-0298).
dplyr::group_by(s_label) %>%
dplyr::mutate(n = row_number()) %>%
dplyr::mutate(n = ifelse(is.na(s_label), NA, n)) %>%
dplyr::filter(is.na(n) | n == "1")
# join geonames altitude data to record altitude data
load("data/fulcrum/altitude.Rda")
df3 <- df2 %>%
dplyr::ungroup() %>%
dplyr::inner_join(altitudes) %>%
# make altitude variable and altitude_method variables to track which altitude is being used
dplyr::mutate(altitude_method_diff = geonames_altitude - fulcrum_altitude,
altitude = ifelse(collection_lat_long_method == "photo", geonames_altitude,
ifelse(is.na(fulcrum_altitude), geonames_altitude, fulcrum_altitude)),
altitude_method = ifelse(collection_lat_long_method == "photo", "geonames",
ifelse(is.na(fulcrum_altitude), "geonames", "fulcrum")))
# Create Island Column
df3$collection_island <- "?"
df3[filter_box(df3$collection_longitude, df3$collection_latitude, c(-158.3617,21.1968,-157.5117,21.7931)), "collection_island"] <- "Oahu"
df3[filter_box(df3$collection_longitude, df3$collection_latitude, c(-159.9362, 21.6523, -159.1782, 22.472)), "collection_island"] <- "Kauai"
df3[filter_box(df3$collection_longitude, df3$collection_latitude, c(-157.327, 21.0328, -156.685, 21.2574)), "collection_island"] <- "Molokai"
df3[filter_box(df3$collection_longitude, df3$collection_latitude, c(-156.7061, 20.4712, -155.9289, 21.0743)), "collection_island"] <- "Maui"
df3[filter_box(df3$collection_longitude, df3$collection_latitude, c(-156.1346, 18.6619, -154.6985, 20.4492)), "collection_island"] <- "Big Island"
# Create Trail Column
df3$collection_location <- NA
df3[filter_box(df3$collection_longitude, df3$collection_latitude, c(-157.72537,21.303309,-157.71919,21.32122)), "collection_location"] <- "Kuliouou Ridge Trail"
df3[filter_box(df3$collection_longitude, df3$collection_latitude, c(-158.0192352613,21.5014265529,-158.0145925283,21.5041245046)), "collection_location"] <- "Wahiawa Botanical Garden"
df3[filter_box(df3$collection_longitude, df3$collection_latitude, c(-157.8598800302,21.3149311581,-157.855797708,21.3182194587)), "collection_location"] <- "Foster Community Garden"
df3[filter_box(df3$collection_longitude, df3$collection_latitude, c(-157.7829487403,21.3569863645,-157.7752268314,21.3655295525)), "collection_location"] <- "Maunawili Demonstration Trail"
df3[filter_box(df3$collection_longitude, df3$collection_latitude, c(-157.8014534712,21.3322593,-157.798127532,21.3427719396)), "collection_location"] <- "Manoa Falls Trail"
df3[filter_box(df3$collection_longitude, df3$collection_latitude, c(-157.8135502338,21.3779082884,-157.7915561199,21.3970691079)), "collection_location"] <- "Ho'omaluhia Botanical Garden"
df3[filter_box(df3$collection_longitude, df3$collection_latitude, c(-159.613624,22.167098,-159.575601,22.226422)), "collection_location"] <- "Na Pali Coast State Wilderness Park"
genotyping_sheet_raw <- googlesheets::gs_key("1TMgx1TRZ4cgRn24eQCzoy378fKcYRgMrYVlrqgMXVQA") %>%
googlesheets::gs_read("Sheet1", na = c("#N/A", "NA", ""),
by = c("c_label", "s_label")) %>%
dplyr::filter(!is.na(s_label)) %>%
# remove c_label variable (this column was hand typed and contains at least 2 errors)
dplyr::select(-c_label, s_label, species_id, lysis_date, pcr_date, ITS2_pcr_product, rhabditid_pcr_product, notes)
# find s_labels in genotyping sheet
slabels <- str_subset(genotyping_sheet_raw$s_label, pattern = "S-")
# filter genotyping sheet by s_labels matching "S-" pattern
genotyping_sheet <- genotyping_sheet_raw %>%
dplyr::filter(s_label %in% slabels)
# Join genotyping sheet with collection and isolation data
fulcrum_dat <- df3 %>%
dplyr::full_join(genotyping_sheet) %>%
# Fill project_id variable incase there are NAs introduced
dplyr::fill(project_id) %>%
# Rename variables
dplyr::rename(project_id = project,
collection_id = c_label,
isolation_id = s_label) %>%
# Reorder variables
dplyr::select(project_id,
collection_id,
isolation_id,
species_id,
collection_by,
collection_datetime_UTC,
collection_date_UTC,
collection_local_time,
collection_island,
collection_location,
collection_latitude,
collection_longitude,
collection_fulcrum_latitude,
collection_fulcrum_longitude,
collection_lat_long_method,
collection_lat_long_method_diff,
ambient_temperature,
flag_ambient_temperature_run,
ambient_humidity,
substrate_temperature,
substrate_moisture,
fulcrum_altitude,
geonames_altitude,
altitude,
altitude_method,
altitude_method_diff,
landscape,
sky_view,
substrate,
substrate_other,
substrate_notes,
sample_photo,
sample_photo_caption,
gridsect,
gridsect_index,
grid_sect_direction,
gridsect_radius,
isolation_by,
isolation_datetime_UTC,
isolation_date_UTC,
isolation_local_time,
isolation_latitude,
isolation_longitude,
worms_on_sample,
approximate_number_of_worms,
lysis_date,
pcr_date,
ITS2_pcr_product,
rhabditid_pcr_product,
notes)
# export R dataframe
save(file = "data/fulcrum/fulcrum_dat.Rda", fulcrum_dat)
# Join genotyping sheet with collection and isolation data
fulcrum_dat <- df3 %>%
dplyr::full_join(genotyping_sheet) %>%
# Fill project_id variable incase there are NAs introduced
tidyr::fill(project_id) %>%
# Rename variables
dplyr::rename(project_id = project,
collection_id = c_label,
isolation_id = s_label) %>%
# Reorder variables
dplyr::select(project_id,
collection_id,
isolation_id,
species_id,
collection_by,
collection_datetime_UTC,
collection_date_UTC,
collection_local_time,
collection_island,
collection_location,
collection_latitude,
collection_longitude,
collection_fulcrum_latitude,
collection_fulcrum_longitude,
collection_lat_long_method,
collection_lat_long_method_diff,
ambient_temperature,
flag_ambient_temperature_run,
ambient_humidity,
substrate_temperature,
substrate_moisture,
fulcrum_altitude,
geonames_altitude,
altitude,
altitude_method,
altitude_method_diff,
landscape,
sky_view,
substrate,
substrate_other,
substrate_notes,
sample_photo,
sample_photo_caption,
gridsect,
gridsect_index,
grid_sect_direction,
gridsect_radius,
isolation_by,
isolation_datetime_UTC,
isolation_date_UTC,
isolation_local_time,
isolation_latitude,
isolation_longitude,
worms_on_sample,
approximate_number_of_worms,
lysis_date,
pcr_date,
ITS2_pcr_product,
rhabditid_pcr_product,
notes)
# Join genotyping sheet with collection and isolation data
fulcrum_dat <- df3 %>%
dplyr::full_join(genotyping_sheet) %>%
# Rename variables
dplyr::rename(project_id = project,
collection_id = c_label,
isolation_id = s_label) %>%
# Fill project_id variable incase there are NAs introduced
tidyr::fill(project_id) %>%
# Reorder variables
dplyr::select(project_id,
collection_id,
isolation_id,
species_id,
collection_by,
collection_datetime_UTC,
collection_date_UTC,
collection_local_time,
collection_island,
collection_location,
collection_latitude,
collection_longitude,
collection_fulcrum_latitude,
collection_fulcrum_longitude,
collection_lat_long_method,
collection_lat_long_method_diff,
ambient_temperature,
flag_ambient_temperature_run,
ambient_humidity,
substrate_temperature,
substrate_moisture,
fulcrum_altitude,
geonames_altitude,
altitude,
altitude_method,
altitude_method_diff,
landscape,
sky_view,
substrate,
substrate_other,
substrate_notes,
sample_photo,
sample_photo_caption,
gridsect,
gridsect_index,
grid_sect_direction,
gridsect_radius,
isolation_by,
isolation_datetime_UTC,
isolation_date_UTC,
isolation_local_time,
isolation_latitude,
isolation_longitude,
worms_on_sample,
approximate_number_of_worms,
lysis_date,
pcr_date,
ITS2_pcr_product,
rhabditid_pcr_product,
notes)
View(fulcrum_dat)
# export R dataframe
save(file = "data/fulcrum/fulcrum_dat.Rda", fulcrum_dat)
###################################################################################
### Diagnostic  Map function                                                    ###
###################################################################################
map_collection <- function(df, color_use) {
icos <- iconList(
red = makeIcon(
iconUrl = paste0("https://storage.googleapis.com/andersenlab.org/img/red.svg"),
iconWidth = 20, iconHeight = 20,
popupAnchorX = 0.001, popupAnchorY = -20,
iconAnchorX = 20/2, iconAnchorY = 20
),
green = makeIcon(
iconUrl = paste0("https://storage.googleapis.com/andersenlab.org/img/green.svg"),
iconWidth = 10, iconHeight = 10,
popupAnchorX = 0.001, popupAnchorY = -10,
iconAnchorX = 10/2, iconAnchorY = 10
)
)
df <- dplyr::filter(df, !is.na(df[[color_use]])) %>%
dplyr::mutate(substrate=ifelse(is.na(substrate), "", substrate)) %>%
dplyr::arrange(collection_lat_long_method)
#print(df)
# make title
tag.map.title <- tags$style(HTML("
.leaflet-control.map-title {
transform: translate(-50%,20%);
position: fixed !important;
left: 50%;
text-align: center;
padding-left: 10px;
padding-right: 10px;
background: rgba(255,255,255,0.75);
font-weight: bold;
font-size: 12px;
}
"))
title <- tags$div(
tag.map.title, HTML(glue::glue("Review {df %>% distinct(project_id) %>% dplyr::pull(project_id)} collection locations"))
)
attach(df)
leaflet::leaflet(data = df, width = 1200, height = 800, options = list(zoomControl = T)) %>%
leaflet::addTiles(
paste0(
"https://stamen-tiles-{s}.a.ssl.fastly.net/terrain-background/{z}/{x}/{y}.png",
jsonlite::read_json("data/thunderforest.json")$key)
) %>%
leaflet::addMarkers(~collection_longitude,
~collection_latitude,
popup = glue::glue("<h2>{collection_id}</h2><hr />
<strong>collection uplaoded by:</strong> {collection_by}<br />
<strong>latitidue, longitude:</strong> {format(round(collection_latitude, 6), nsmall = 6)}, {format(round(collection_longitude, 6), nsmall = 6)}<br />
<strong>postion method used:</strong> {collection_lat_long_method}<br />
<strong>local time:</strong> {collection_local_time}<br />
<strong>altitude:</strong> {altitude} meters<br />
<strong>landscape:</strong> {landscape}<br /><br />"),
popupOptions(maxWidth = 500),
icon = icos[ df[[color_use]] ] ) %>%
leaflet::addControl(title, position = "topleft", className="map-title")
#htmlwidgets::saveWidget(m, tempfile(), selfcontained = FALSE)
#webshot::webshot("temp.html", file = "map.png",
#        cliprect = "viewport", vwidth = 1000, vheight = 1000)
}
##########################################################################
### Use the map function                                               ###
##########################################################################
# Make df for diagnostic plotting
test_df <- fulcrum_dat %>%
dplyr::filter(!is.na(collection_id)) %>%
dplyr::distinct(collection_id, .keep_all =T)
# map collection for diagnostic
diagnostic_map <-  map_collection(test_df %>% dplyr::mutate(color = case_when(collection_lat_long_method == "fulcrum" ~ "red",
collection_lat_long_method == "photo" ~ "green")), "color")
###################################################################################
### Diagnostic  Map function                                                    ###
###################################################################################
map_collection <- function(df, color_use) {
icos <- iconList(
red = makeIcon(
iconUrl = paste0("https://storage.googleapis.com/andersenlab.org/img/red.svg"),
iconWidth = 20, iconHeight = 20,
popupAnchorX = 0.001, popupAnchorY = -20,
iconAnchorX = 20/2, iconAnchorY = 20
),
green = makeIcon(
iconUrl = paste0("https://storage.googleapis.com/andersenlab.org/img/green.svg"),
iconWidth = 10, iconHeight = 10,
popupAnchorX = 0.001, popupAnchorY = -10,
iconAnchorX = 10/2, iconAnchorY = 10
)
)
df <- dplyr::filter(df, !is.na(df[[color_use]])) %>%
dplyr::mutate(substrate=ifelse(is.na(substrate), "", substrate)) %>%
dplyr::arrange(collection_lat_long_method)
#print(df)
# make title
tag.map.title <- tags$style(HTML("
.leaflet-control.map-title {
transform: translate(-50%,20%);
position: fixed !important;
left: 50%;
text-align: center;
padding-left: 10px;
padding-right: 10px;
background: rgba(255,255,255,0.75);
font-weight: bold;
font-size: 12px;
}
"))
title <- tags$div(
tag.map.title, HTML("Review collection locations")
)
attach(df)
leaflet::leaflet(data = df, width = 1200, height = 800, options = list(zoomControl = T)) %>%
leaflet::addTiles(
paste0(
"https://stamen-tiles-{s}.a.ssl.fastly.net/terrain-background/{z}/{x}/{y}.png",
jsonlite::read_json("data/thunderforest.json")$key)
) %>%
leaflet::addMarkers(~collection_longitude,
~collection_latitude,
popup = glue::glue("<h2>{collection_id}</h2><hr />
<strong>collection uplaoded by:</strong> {collection_by}<br />
<strong>latitidue, longitude:</strong> {format(round(collection_latitude, 6), nsmall = 6)}, {format(round(collection_longitude, 6), nsmall = 6)}<br />
<strong>postion method used:</strong> {collection_lat_long_method}<br />
<strong>local time:</strong> {collection_local_time}<br />
<strong>altitude:</strong> {altitude} meters<br />
<strong>landscape:</strong> {landscape}<br /><br />"),
popupOptions(maxWidth = 500),
icon = icos[ df[[color_use]] ] ) %>%
leaflet::addControl(title, position = "topleft", className="map-title")
#htmlwidgets::saveWidget(m, tempfile(), selfcontained = FALSE)
#webshot::webshot("temp.html", file = "map.png",
#        cliprect = "viewport", vwidth = 1000, vheight = 1000)
}
##########################################################################
### Use the map function                                               ###
##########################################################################
# Make df for diagnostic plotting
test_df <- fulcrum_dat %>%
dplyr::filter(!is.na(collection_id)) %>%
dplyr::distinct(collection_id, .keep_all =T)
# map collection for diagnostic
diagnostic_map <-  map_collection(test_df %>% dplyr::mutate(color = case_when(collection_lat_long_method == "fulcrum" ~ "red",
collection_lat_long_method == "photo" ~ "green")), "color")
library(tidyverse)
library(leaflet)
library(htmlwidgets)
library(htmltools)
# load fulcrum_dat.Rda to see processed collection data
load("/Users/tim/repos/20191001_Hawaii/data/fulcrum/fulcrum_dat.Rda")
# filter to collection_lat_long_method_diff = NA
fulcrum_lat_long <- fulcrum_dat %>%
dplyr::filter(collection_lat_long_method == "fulcrum", !is.na(collection_id)) %>%
dplyr::distinct(collection_id, .keep_all = T)
# load Exif data to see if lat longs are really missing
load("/Users/tim/repos/20191001_Hawaii/data/fulcrum/exif.Rda")
exif_lat_long_NA <- exif %>%
dplyr::filter(is.na(latitude))
# yes they are missing
#we use fulcrum lat and long then we need a manual check on location data from person that did the collections
# filter collection data to fulcrum photo method.
# plot these location data for review. need to make useful plot with zoom most likely
photo_lat_long_NAs <- dplyr::left_join(exif_lat_long_NA, fulcrum_lat_long, by = "sample_photo")
###################################################################################
### Diagnostic  Map function                                                    ###
###################################################################################
map_collection <- function(df, color_use) {
icos <- iconList(
red = makeIcon(
iconUrl = paste0("https://storage.googleapis.com/andersenlab.org/img/red.svg"),
iconWidth = 20, iconHeight = 20,
popupAnchorX = 0.001, popupAnchorY = -20,
iconAnchorX = 20/2, iconAnchorY = 20
),
green = makeIcon(
iconUrl = paste0("https://storage.googleapis.com/andersenlab.org/img/green.svg"),
iconWidth = 10, iconHeight = 10,
popupAnchorX = 0.001, popupAnchorY = -10,
iconAnchorX = 10/2, iconAnchorY = 10
)
)
df <- dplyr::filter(df, !is.na(df[[color_use]])) %>%
dplyr::mutate(substrate=ifelse(is.na(substrate), "", substrate)) %>%
dplyr::arrange(collection_lat_long_method)
#print(df)
# make title
tag.map.title <- tags$style(HTML("
.leaflet-control.map-title {
transform: translate(-50%,20%);
position: fixed !important;
left: 50%;
text-align: center;
padding-left: 10px;
padding-right: 10px;
background: rgba(255,255,255,0.75);
font-weight: bold;
font-size: 12px;
}
"))
title <- tags$div(
tag.map.title, HTML("Review collection locations")
)
attach(df)
leaflet::leaflet(data = df, width = 1200, height = 800, options = list(zoomControl = T)) %>%
leaflet::addTiles(
paste0(
"https://stamen-tiles-{s}.a.ssl.fastly.net/terrain-background/{z}/{x}/{y}.png",
jsonlite::read_json("data/thunderforest.json")$key)
) %>%
leaflet::addMarkers(~collection_longitude,
~collection_latitude,
popup = glue::glue("<h2>{collection_id}</h2><hr />
<strong>collection uplaoded by:</strong> {collection_by}<br />
<strong>latitidue, longitude:</strong> {format(round(collection_latitude, 6), nsmall = 6)}, {format(round(collection_longitude, 6), nsmall = 6)}<br />
<strong>postion method used:</strong> {collection_lat_long_method}<br />
<strong>local time:</strong> {collection_local_time}<br />
<strong>altitude:</strong> {altitude} meters<br />
<strong>landscape:</strong> {landscape}<br /><br />"),
popupOptions(maxWidth = 500),
icon = icos[ df[[color_use]] ] ) %>%
leaflet::addControl(title, position = "topleft", className="map-title")
#htmlwidgets::saveWidget(m, tempfile(), selfcontained = FALSE)
#webshot::webshot("temp.html", file = "map.png",
#        cliprect = "viewport", vwidth = 1000, vheight = 1000)
}
##########################################################################
### Use the map function                                               ###
##########################################################################
# Make df for diagnostic plotting
test_df <- fulcrum_dat %>%
dplyr::filter(!is.na(collection_id)) %>%
dplyr::distinct(collection_id, .keep_all =T)
# map collection for diagnostic
diagnostic_map <-  map_collection(test_df %>% dplyr::mutate(color = case_when(collection_lat_long_method == "fulcrum" ~ "red",
collection_lat_long_method == "photo" ~ "green")), "color")
