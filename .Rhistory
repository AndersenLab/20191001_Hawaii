-system_created_at,
-system_updated_at,
-date) %>%
# choose one sample photo only. This takes the first sample photo and warns if additional photos are discarded
tidyr::separate(col = sample_photo, into = "sample_photo", sep = ",", extra = "warn") %>%
# this is UTC time (very important if you want to convert to HST time)
dplyr::mutate(sampled_datetime = lubridate::ymd_hms(created_at, tz = "UTC")) %>%
# again this is UTC date (very important if you want to convert to HST date)
dplyr::mutate(sampled_date = lubridate::date(created_at)) %>%
dplyr::select(-created_at) %>%
# Fix Fahrenheit observations
dplyr::mutate(substrate_temperature = ifelse(substrate_temperature > 35,
FtoC(substrate_temperature),
substrate_temperature)) %>%
# Fix ambient temp F to C
dplyr::mutate(ambient_temperature = ifelse(ambient_temperature_c > 50,
FtoC(ambient_temperature_c),
ambient_temperature_c)) %>%
# drop ambient temp c
dplyr::select(-ambient_temperature_c) %>%
# add flags for runs of temperature data
dplyr::arrange(sampled_datetime) %>%
dplyr::mutate(ambient_run_flag = (ambient_humidity == dplyr::lag(ambient_humidity)) &
(ambient_temperature == dplyr::lag(ambient_temperature))
& (gridsect == "no"))
# Read in S-labels
isolation <- readr::read_csv("data/fulcrum/nematode_isolation.csv") %>%
dplyr::select(c_label_id = c_label,
isolation_id = fulcrum_id,
isolation_at = system_created_at,
isolation_by = created_by,
worms_on_sample,
approximate_number_of_worms,
approximate_number_of_worms,
isolation_date = date,
isolation_time = time,
isolation_latitude = latitude,
isolation_longitude = longitude)
# load data from images already processed by Exif
load("data/fulcrum/exif.Rda")
df1 <- dplyr::full_join(isolation, collection, by = c("c_label_id" = "fulcrum_id")) %>%
#rename the lat and long from fulcrum to record_latitude and record_longitude so that we can specify lat and long from exif tool
dplyr::rename(record_latitude = latitude, record_longitude = longitude) %>%
dplyr::select(c_label,
everything(),
-c_label_id,
-sample_photo_url) %>%
# Join position data from exif by sample_photo
dplyr::left_join(exif) %>%
# Create flag to track if lat and long come from record or photo
dplyr::mutate(latitude_longitude_from = ifelse(is.na(latitude), "record", "photo")) %>%
# In cases where lat/lon are not available from photo set to record_latitude and record_longitude
dplyr::mutate(latitude = ifelse(is.na(latitude), record_latitude, latitude)) %>%
dplyr::mutate(longitude = ifelse(is.na(longitude), record_longitude, longitude)) %>%
dplyr::mutate(ambient_temperature = as.numeric(ambient_temperature)) %>%
dplyr::mutate_at(.vars = vars(dplyr::starts_with("gps")),
.funs = funs(as.numeric)) %>%
dplyr::rename(record_altitude = gps_altitude) %>%
dplyr::mutate(worms_on_sample = ifelse(is.na(worms_on_sample), "?", worms_on_sample)) %>%
dplyr::filter(!is.na(c_label)) %>%
dplyr::select(-assigned_to,
-status,
-Artist) %>%
# Calculate the Haversine distance between fulcrum record_latitude and record_longitue and photo latitude and longitude
dplyr::rowwise() %>%
dplyr::mutate(gps_err = geosphere::distHaversine(c(longitude, latitude),
c(record_longitude, record_latitude))) %>%
dplyr::ungroup()
# In 9 instances there were two separate isolation records for the same c_label.
# selecting to retain the isolation record based on worm presence. Yes > tracks > no.
# If both isolation records indicate "tracks only" or "no" then we retain the earliest record.
# In no cases did both isolation records indicate worms were present on c_label.
duplicated_isolations_to_remove <- c("5535470e-d82d-4ca4-ac77-860ea62c51c1",
"340dbd85-7b9a-4ecb-be5f-ac1ef944e057",
"88a12c25-a129-45e0-9306-c3a232b33552",
"8ad23d90-c0b8-4aa1-b135-f2d1fead94d4",
"036a80ac-3372-4c3c-b40d-edfa0a9d68cc",
"6dbecd43-e4e3-405f-b4dc-e757ad4449a5",
"6fa1a690-ea42-49a7-b86d-e7181b9f68bf",
"90f59eb1-abf8-4e7a-8ebc-d3148527b831",
"cee218c8-aad0-4e1b-9a04-0b084439cfab")
df1 <- df1 %>%
dplyr::filter(!isolation_id %in% duplicated_isolations_to_remove)
df2 <- readr::read_csv("data/fulcrum/nematode_isolation_s_labeled_plates.csv") %>%
dplyr::select(fulcrum_parent_id, s_label) %>%
dplyr::full_join(df1, by = c("fulcrum_parent_id" = "isolation_id")) %>% # this used to be a left join
dplyr::select(-fulcrum_parent_id, -updated_by, -version, -geometry, -gps_horizontal_accuracy,
-gps_vertical_accuracy, -gps_speed, -gps_course, -ExposureTime,
-Aperture, -BrightnessValue, -FOV, -altitude) %>%
# adjust gps_err to NA if there is only a record GPS postion
dplyr::mutate(gps_err = ifelse(latitude_longitude_from == "record", NA, gps_err))
# join geonames altitude data to record altitude data
load("data/fulcrum/altitude.Rda")
View(altitudes)
df3 <- df2 %>%
dplyr::ungroup() %>%
dplyr::inner_join(altitudes)
# Create Island Column
df3$island <- "?"
df3[filter_box(df3$longitude, df3$latitude, c(-158.3617,21.1968,-157.5117,21.7931)), "island"] <- "Oahu"
df3[filter_box(df3$longitude, df3$latitude, c(-159.9362, 21.6523, -159.1782, 22.472)), "island"] <- "Kauai"
df3[filter_box(df3$longitude, df3$latitude, c(-157.327, 21.0328, -156.685, 21.2574)), "island"] <- "Molokai"
df3[filter_box(df3$longitude, df3$latitude, c(-156.7061, 20.4712, -155.9289, 21.0743)), "island"] <- "Maui"
df3[filter_box(df3$longitude, df3$latitude, c(-156.1346, 18.6619, -154.6985, 20.4492)), "island"] <- "Big Island"
# Create Trail Column
df3$location <- NA
df3[filter_box(df3$longitude, df3$latitude, c(-157.72537,21.303309,-157.71919,21.32122)), "location"] <- "Kuliouou Ridge Trail"
df3[filter_box(df3$longitude, df3$latitude, c(-158.0192352613,21.5014265529,-158.0145925283,21.5041245046)), "location"] <- "Wahiawa Botanical Garden"
df3[filter_box(df3$longitude, df3$latitude, c(-157.8598800302,21.3149311581,-157.855797708,21.3182194587)), "location"] <- "Foster Community Garden"
df3[filter_box(df3$longitude, df3$latitude, c(-157.7829487403,21.3569863645,-157.7752268314,21.3655295525)), "location"] <- "Maunawili Demonstration Trail"
df3[filter_box(df3$longitude, df3$latitude, c(-157.8014534712,21.3322593,-157.798127532,21.3427719396)), "location"] <- "Manoa Falls Trail"
df3[filter_box(df3$longitude, df3$latitude, c(-157.8135502338,21.3779082884,-157.7915561199,21.3970691079)), "location"] <- "Ho'omaluhia Botanical Garden"
df3[filter_box(df3$longitude, df3$latitude, c(-159.613624,22.167098,-159.575601,22.226422)), "location"] <- "Na Pali Coast State Wilderness Park"
View(df3)
genotyping_sheet_raw <- googlesheets::gs_key("1TMgx1TRZ4cgRn24eQCzoy378fKcYRgMrYVlrqgMXVQA") %>%
googlesheets::gs_read("Sheet1", na = c("#N/A", "NA", ""),
by = c("c_label", "s_label")) %>%
dplyr::filter(!is.na(s_label))
# find s_labels in genotyping sheet
slabels <- str_subset(genotyping_sheet_raw$s_label, pattern = "S-")
# filter genotyping sheet by s_labels matching "S-" pattern
genotyping_sheet <- genotyping_sheet_raw %>%
dplyr::filter(s_label %in% slabels)
# Join genotyping sheet with collection and isolation data
df4 <- df3 %>%
dplyr::inner_join(genotyping_sheet)
# Join genotyping sheet with collection and isolation data
df4 <- df3 %>%
dplyr::full_join(genotyping_sheet)
View(df4)
View(genotyping_sheet_raw)
View(genotyping_sheet)
View(df4)
View(df4)
View(df4)
# pull out s_labels with C_label NA
unpaired_s_labels_from_genotyping <- df4 %>%
dplyr::filter(is.na(worms_on_sample))
View(unpaired_s_labels_from_genotyping)
# pull out s_labels with C_label NA
unpaired_s_labels_from_genotyping <- df4 %>%
dplyr::filter(is.na(worms_on_sample)) %>%
dplyr::pull(s_label)
View(collection)
View(isolation)
View(df1)
View(isolation)
View(df1)
View(df1)
View(df2)
# testing
all_s_labels <- readr::read_csv("data/fulcrum/nematode_isolation_s_labeled_plates.csv") %>%
dplyr::select(fulcrum_parent_id, s_label) %>%
# testing
all_s_labels <- readr::read_csv("data/fulcrum/nematode_isolation_s_labeled_plates.csv") %>%
dplyr::select(fulcrum_parent_id, s_label)
# testing
all_s_labels <- readr::read_csv("data/fulcrum/nematode_isolation_s_labeled_plates.csv") %>%
dplyr::select(fulcrum_parent_id, s_label)
View(all_s_labels)
unpaired_s_labels_from_genotyping
View(all_s_labels)
View(df2)
View(df4)
genotyping_sheet_raw <- googlesheets::gs_key("1TMgx1TRZ4cgRn24eQCzoy378fKcYRgMrYVlrqgMXVQA") %>%
googlesheets::gs_read("Sheet1", na = c("#N/A", "NA", ""),
by = c("c_label", "s_label")) %>%
dplyr::filter(!is.na(s_label)) %>%
# remove c_label variable (this column was hand typed and contains at least 2 errors)
dplyr::select(-c_label)
# find s_labels in genotyping sheet
slabels <- str_subset(genotyping_sheet_raw$s_label, pattern = "S-")
# filter genotyping sheet by s_labels matching "S-" pattern
genotyping_sheet <- genotyping_sheet_raw %>%
dplyr::filter(s_label %in% slabels)
# Join genotyping sheet with collection and isolation data
df4 <- df3 %>%
dplyr::full_join(genotyping_sheet)
# pull out s_labels with C_label NA (there are 12 s_labels that are not joining properly. Three case types
# Case 1: (8 instances) of s_lable in genotyping sheet, but not in `nematode_isolation_s_labeled_plates.csv`
# Case 2: (2 instances) s_lable is present in genotyping sheet and `nematode_isolation_s_labeled_plates.csv`, but paired with different c_label in genoptyping sheet.
# Case 3: (2 instances) s_lable is present in genotyping sheet and `nematode_isolation_s_labeled_plates.csv`, but c_label is NA in genoptyping sheet.
# Solution for case 2 & 3 is to remove c_label column before joining. DONE!
# Solution for case 1. Manually check?
unpaired_s_labels_from_genotyping <- df4 %>%
dplyr::filter(is.na(worms_on_sample)) %>%
dplyr::pull(s_label)
View(df4)
View(genotyping_sheet_raw)
View(df2)
View(all_s_labels)
View(all_s_labels)
# testing
all_s_labels <- readr::read_csv("data/fulcrum/nematode_isolation_s_labeled_plates.csv")
View(all_s_labels)
df2 <- readr::read_csv("data/fulcrum/nematode_isolation_s_labeled_plates.csv") %>%
dplyr::select(fulcrum_parent_id, s_label) %>%
dplyr::full_join(df1, by = c("fulcrum_parent_id" = "isolation_id")) %>% # this used to be a left join
dplyr::select(-fulcrum_parent_id, -updated_by, -version, -geometry, -gps_horizontal_accuracy,
-gps_vertical_accuracy, -gps_speed, -gps_course, -ExposureTime,
-Aperture, -BrightnessValue, -FOV, -altitude) %>%
# adjust gps_err to NA if there is only a record GPS postion
dplyr::mutate(gps_err = ifelse(latitude_longitude_from == "record", NA, gps_err)) %>%
# set S-labels to NA if isolation entry is 'no plates' there is 1 instance of this.
dplyr::mutate(s_label = ifelse(s_label == "no plates", NA, s_label))
df3 <- df2 %>%
dplyr::ungroup() %>%
dplyr::inner_join(altitudes)
# Create Island Column
df3$island <- "?"
df3[filter_box(df3$longitude, df3$latitude, c(-158.3617,21.1968,-157.5117,21.7931)), "island"] <- "Oahu"
df3[filter_box(df3$longitude, df3$latitude, c(-159.9362, 21.6523, -159.1782, 22.472)), "island"] <- "Kauai"
df3[filter_box(df3$longitude, df3$latitude, c(-157.327, 21.0328, -156.685, 21.2574)), "island"] <- "Molokai"
df3[filter_box(df3$longitude, df3$latitude, c(-156.7061, 20.4712, -155.9289, 21.0743)), "island"] <- "Maui"
df3[filter_box(df3$longitude, df3$latitude, c(-156.1346, 18.6619, -154.6985, 20.4492)), "island"] <- "Big Island"
# Create Trail Column
df3$location <- NA
df3[filter_box(df3$longitude, df3$latitude, c(-157.72537,21.303309,-157.71919,21.32122)), "location"] <- "Kuliouou Ridge Trail"
df3[filter_box(df3$longitude, df3$latitude, c(-158.0192352613,21.5014265529,-158.0145925283,21.5041245046)), "location"] <- "Wahiawa Botanical Garden"
df3[filter_box(df3$longitude, df3$latitude, c(-157.8598800302,21.3149311581,-157.855797708,21.3182194587)), "location"] <- "Foster Community Garden"
df3[filter_box(df3$longitude, df3$latitude, c(-157.7829487403,21.3569863645,-157.7752268314,21.3655295525)), "location"] <- "Maunawili Demonstration Trail"
df3[filter_box(df3$longitude, df3$latitude, c(-157.8014534712,21.3322593,-157.798127532,21.3427719396)), "location"] <- "Manoa Falls Trail"
df3[filter_box(df3$longitude, df3$latitude, c(-157.8135502338,21.3779082884,-157.7915561199,21.3970691079)), "location"] <- "Ho'omaluhia Botanical Garden"
df3[filter_box(df3$longitude, df3$latitude, c(-159.613624,22.167098,-159.575601,22.226422)), "location"] <- "Na Pali Coast State Wilderness Park"
genotyping_sheet_raw <- googlesheets::gs_key("1TMgx1TRZ4cgRn24eQCzoy378fKcYRgMrYVlrqgMXVQA") %>%
googlesheets::gs_read("Sheet1", na = c("#N/A", "NA", ""),
by = c("c_label", "s_label")) %>%
dplyr::filter(!is.na(s_label)) %>%
# remove c_label variable (this column was hand typed and contains at least 2 errors)
dplyr::select(-c_label)
# find s_labels in genotyping sheet
slabels <- str_subset(genotyping_sheet_raw$s_label, pattern = "S-")
# filter genotyping sheet by s_labels matching "S-" pattern
genotyping_sheet <- genotyping_sheet_raw %>%
dplyr::filter(s_label %in% slabels)
# Join genotyping sheet with collection and isolation data
df4 <- df3 %>%
dplyr::full_join(genotyping_sheet)
glimpse(df4)
View(collection)
View(isolation)
View(collection)
View(collection)
View(collection)
collection <- readr::read_csv("data/fulcrum/nematode_field_sampling.csv") %>%
dplyr::mutate(c_label = stringr::str_to_upper(c_label)) %>%
# name created_by to specify who picked up the sample
dplyr::rename(collection_by = created_by) %>%
dplyr::select(-updated_at,
-system_created_at,
-system_updated_at,
-date) %>%
# choose one sample photo only. This takes the first sample photo and warns if additional photos are discarded
tidyr::separate(col = sample_photo, into = "sample_photo", sep = ",", extra = "warn") %>%
# this is UTC time (very important if you want to convert to HST time)
dplyr::mutate(collection_datetime_UTC = lubridate::ymd_hms(created_at, tz = "UTC")) %>%
# again this is UTC date (very important if you want to convert to HST date)
dplyr::mutate(collection_date_UTC = lubridate::date(created_at)) %>%
dplyr::select(-created_at) %>%
# Fix Fahrenheit observations
dplyr::mutate(substrate_temperature = ifelse(substrate_temperature > 35,
FtoC(substrate_temperature),
substrate_temperature)) %>%
# Fix ambient temp F to C
dplyr::mutate(ambient_temperature = ifelse(ambient_temperature_c > 50,
FtoC(ambient_temperature_c),
ambient_temperature_c)) %>%
# drop ambient temp c
dplyr::select(-ambient_temperature_c) %>%
# add flags for runs of temperature data
dplyr::arrange(collection_datetime_UTC) %>%
dplyr::mutate(ambient_run_flag = (ambient_humidity == dplyr::lag(ambient_humidity)) &
(ambient_temperature == dplyr::lag(ambient_temperature))
& (gridsect == "no"))
View(collection)
# Read in S-labels
isolation <- readr::read_csv("data/fulcrum/nematode_isolation.csv") %>%
dplyr::select(c_label_id = c_label,
isolation_id = fulcrum_id,
isolation_datetime_UTC = system_created_at,
isolation_by = created_by,
worms_on_sample,
approximate_number_of_worms,
isolation_date_UTC = date,
isolation_local_time = time,
isolation_latitude = latitude,
isolation_longitude = longitude)
# load data from images already processed by Exif
load("data/fulcrum/exif.Rda")
df1 <- dplyr::full_join(isolation, collection, by = c("c_label_id" = "fulcrum_id"))
df1 <- dplyr::full_join(isolation, collection, by = c("c_label_id" = "fulcrum_id")) %>%
#rename the lat and long from fulcrum to record_latitude and record_longitude so that we can specify lat and long from exif tool
dplyr::rename(collection_fulcrum_latitude = latitude, collection_fulcrum_longitude = longitude) %>%
dplyr::select(c_label,
everything(),
-c_label_id,
-sample_photo_url)
View(df1)
df1 <- dplyr::full_join(isolation, collection, by = c("c_label_id" = "fulcrum_id")) %>%
#rename the lat and long from fulcrum to record_latitude and record_longitude so that we can specify lat and long from exif tool
dplyr::rename(collection_fulcrum_latitude = latitude, collection_fulcrum_longitude = longitude) %>%
dplyr::select(c_label,
everything(),
-c_label_id,
-sample_photo_url)
df1 <- dplyr::full_join(isolation, collection, by = c("c_label_id" = "fulcrum_id")) %>%
#rename the lat and long from fulcrum to record_latitude and record_longitude so that we can specify lat and long from exif tool
dplyr::rename(collection_fulcrum_latitude = latitude, collection_fulcrum_longitude = longitude) %>%
dplyr::select(c_label,
everything(),
-c_label_id,
-sample_photo_url) %>%
# Join position data from exif by sample_photo. in some cases there is not position data from the photos
dplyr::left_join(exif) %>%
# Create flag to track if lat and long come from record or photo
dplyr::mutate(collection_lat_long_method = ifelse(is.na(latitude), "fulcrum", "photo"))
df1 <- dplyr::full_join(isolation, collection, by = c("c_label_id" = "fulcrum_id")) %>%
#rename the lat and long from fulcrum to collection_fulcrum_latitude and collection_fulcrum_longitude so that we can specify lat and long from exif tool
dplyr::rename(collection_fulcrum_latitude = latitude, collection_fulcrum_longitude = longitude) %>%
dplyr::select(c_label,
everything(),
-c_label_id,
-sample_photo_url) %>%
# Join position data from exif by sample_photo. in some cases there is not position data from the photos
dplyr::left_join(exif) %>%
# Create flag to track if lat and long come from record or photo
dplyr::mutate(collection_lat_long_method = ifelse(is.na(latitude), "fulcrum", "photo")) %>%
# In cases where lat/lon are not available from photo set to collection_fulcrum_latitude and collection_fulcrum_longitude
dplyr::mutate(latitude = ifelse(is.na(latitude), collection_fulcrum_latitude, latitude)) %>%
dplyr::mutate(longitude = ifelse(is.na(longitude), collection_fulcrum_longitude, longitude)) %>%
dplyr::mutate(ambient_temperature = as.numeric(ambient_temperature)) %>%
dplyr::mutate_at(.vars = vars(dplyr::starts_with("gps")),
.funs = funs(as.numeric)) %>%
dplyr::rename(record_altitude = gps_altitude) %>%
dplyr::mutate(worms_on_sample = ifelse(is.na(worms_on_sample), "?", worms_on_sample)) %>%
dplyr::filter(!is.na(c_label)) %>%
dplyr::select(-assigned_to,
-status,
-Artist) %>%
# Calculate the Haversine distance between fulcrum record_latitude and record_longitue and photo latitude and longitude
dplyr::rowwise() %>%
dplyr::mutate(collection_lat_long_method_diff = geosphere::distHaversine(c(longitude, latitude),
c(collection_fulcrum_latitude, collection_fulcrum_longitude))) %>%
# rename the latitude and longitude to include 'collection_' prefix
dplyr::ungroup() %>%
dplyr::rename(collection_latitude = latitude,
collection_longitude = longitude)
df1 <- dplyr::full_join(isolation, collection, by = c("c_label_id" = "fulcrum_id")) %>%
#rename the lat and long from fulcrum to collection_fulcrum_latitude and collection_fulcrum_longitude so that we can specify lat and long from exif tool
dplyr::rename(collection_fulcrum_latitude = latitude, collection_fulcrum_longitude = longitude) %>%
dplyr::select(c_label,
everything(),
-c_label_id,
-sample_photo_url) %>%
# Join position data from exif by sample_photo. in some cases there is not position data from the photos
dplyr::left_join(exif)
df1 <- dplyr::full_join(isolation, collection, by = c("c_label_id" = "fulcrum_id")) %>%
#rename the lat and long from fulcrum to collection_fulcrum_latitude and collection_fulcrum_longitude so that we can specify lat and long from exif tool
dplyr::rename(collection_fulcrum_latitude = latitude, collection_fulcrum_longitude = longitude) %>%
dplyr::select(c_label,
everything(),
-c_label_id,
-sample_photo_url) %>%
# Join position data from exif by sample_photo. in some cases there is not position data from the photos
dplyr::left_join(exif) %>%
# Create flag to track if lat and long come from record or photo
dplyr::mutate(collection_lat_long_method = ifelse(is.na(latitude), "fulcrum", "photo"))
df1 <- dplyr::full_join(isolation, collection, by = c("c_label_id" = "fulcrum_id")) %>%
#rename the lat and long from fulcrum to collection_fulcrum_latitude and collection_fulcrum_longitude so that we can specify lat and long from exif tool
dplyr::rename(collection_fulcrum_latitude = latitude, collection_fulcrum_longitude = longitude) %>%
dplyr::select(c_label,
everything(),
-c_label_id,
-sample_photo_url) %>%
# Join position data from exif by sample_photo. in some cases there is not position data from the photos
dplyr::left_join(exif) %>%
# Create flag to track if lat and long come from record or photo
dplyr::mutate(collection_lat_long_method = ifelse(is.na(latitude), "fulcrum", "photo")) %>%
# In cases where lat/lon are not available from photo set to collection_fulcrum_latitude and collection_fulcrum_longitude
dplyr::mutate(latitude = ifelse(is.na(latitude), collection_fulcrum_latitude, latitude))
collection <- readr::read_csv("data/fulcrum/nematode_field_sampling.csv") %>%
dplyr::mutate(c_label = stringr::str_to_upper(c_label)) %>%
# name created_by to specify who picked up the sample
dplyr::rename(collection_by = created_by) %>%
dplyr::select(-updated_at,
-system_created_at,
-system_updated_at,
-date) %>%
# choose one sample photo only. This takes the first sample photo and warns if additional photos are discarded
tidyr::separate(col = sample_photo, into = "sample_photo", sep = ",", extra = "warn") %>%
# this is UTC time (very important if you want to convert to HST time)
dplyr::mutate(collection_datetime_UTC = lubridate::ymd_hms(created_at, tz = "UTC")) %>%
# again this is UTC date (very important if you want to convert to HST date)
dplyr::mutate(collection_date_UTC = lubridate::date(created_at)) %>%
dplyr::select(-created_at) %>%
# Fix Fahrenheit observations
dplyr::mutate(substrate_temperature = ifelse(substrate_temperature > 35,
FtoC(substrate_temperature),
substrate_temperature)) %>%
# Fix ambient temp F to C
dplyr::mutate(ambient_temperature = ifelse(ambient_temperature_c > 50,
FtoC(ambient_temperature_c),
ambient_temperature_c)) %>%
# force ambient temp to numeric
dplyr::mutate(ambient_temperature = as.numeric(ambient_temperature)) %>%
# drop ambient temp c
dplyr::select(-ambient_temperature_c) %>%
# add flags for runs of temperature data
dplyr::arrange(collection_datetime_UTC) %>%
dplyr::mutate(ambient_run_flag = (ambient_humidity == dplyr::lag(ambient_humidity)) &
(ambient_temperature == dplyr::lag(ambient_temperature))
& (gridsect == "no"))
# Read in S-labels
isolation <- readr::read_csv("data/fulcrum/nematode_isolation.csv") %>%
dplyr::select(c_label_id = c_label,
isolation_id = fulcrum_id,
isolation_datetime_UTC = system_created_at,
isolation_by = created_by,
worms_on_sample,
approximate_number_of_worms,
isolation_date_UTC = date,
isolation_local_time = time,
isolation_latitude = latitude,
isolation_longitude = longitude)
df1 <- dplyr::full_join(isolation, collection, by = c("c_label_id" = "fulcrum_id")) %>%
#rename the lat and long from fulcrum to collection_fulcrum_latitude and collection_fulcrum_longitude so that we can specify lat and long from exif tool
dplyr::rename(collection_fulcrum_latitude = latitude, collection_fulcrum_longitude = longitude) %>%
dplyr::select(c_label,
everything(),
-c_label_id,
-sample_photo_url) %>%
# Join position data from exif by sample_photo. in some cases there is not position data from the photos
dplyr::left_join(exif) %>%
# Create flag to track if lat and long come from record or photo
dplyr::mutate(collection_lat_long_method = ifelse(is.na(latitude), "fulcrum", "photo")) %>%
# In cases where lat/lon are not available from photo set to collection_fulcrum_latitude and collection_fulcrum_longitude
dplyr::mutate(latitude = ifelse(is.na(latitude), collection_fulcrum_latitude, latitude)) %>%
dplyr::mutate(longitude = ifelse(is.na(longitude), collection_fulcrum_longitude, longitude)) %>%
dplyr::mutate_at(.vars = vars(dplyr::starts_with("gps")),
.funs = funs(as.numeric)) %>%
dplyr::rename(fulcrum_altitude = gps_altitude) %>%
dplyr::mutate(worms_on_sample = ifelse(is.na(worms_on_sample), "?", worms_on_sample)) %>%
dplyr::filter(!is.na(c_label)) %>%
dplyr::select(-assigned_to,
-status,
-Artist) %>%
# Calculate the Haversine distance between fulcrum record_latitude and record_longitue and photo latitude and longitude
dplyr::rowwise() %>%
dplyr::mutate(collection_lat_long_method_diff = geosphere::distHaversine(c(longitude, latitude),
c(collection_fulcrum_latitude, collection_fulcrum_longitude)))
df1 <- dplyr::full_join(isolation, collection, by = c("c_label_id" = "fulcrum_id")) %>%
#rename the lat and long from fulcrum to collection_fulcrum_latitude and collection_fulcrum_longitude so that we can specify lat and long from exif tool
dplyr::rename(collection_fulcrum_latitude = latitude, collection_fulcrum_longitude = longitude) %>%
dplyr::select(c_label,
everything(),
-c_label_id,
-sample_photo_url) %>%
# Join position data from exif by sample_photo. in some cases there is not position data from the photos
dplyr::left_join(exif) %>%
# Create flag to track if lat and long come from record or photo
dplyr::mutate(collection_lat_long_method = ifelse(is.na(latitude), "fulcrum", "photo")) %>%
# In cases where lat/lon are not available from photo set to collection_fulcrum_latitude and collection_fulcrum_longitude
dplyr::mutate(latitude = ifelse(is.na(latitude), collection_fulcrum_latitude, latitude)) %>%
dplyr::mutate(longitude = ifelse(is.na(longitude), collection_fulcrum_longitude, longitude)) %>%
dplyr::mutate_at(.vars = vars(dplyr::starts_with("gps")),
.funs = funs(as.numeric)) %>%
dplyr::rename(fulcrum_altitude = gps_altitude) %>%
dplyr::mutate(worms_on_sample = ifelse(is.na(worms_on_sample), "?", worms_on_sample)) %>%
dplyr::filter(!is.na(c_label)) %>%
dplyr::select(-assigned_to,
-status,
-Artist)
glimpse(df1)
# Calculate the Haversine distance between fulcrum record_latitude and record_longitue and photo latitude and longitude
dplyr::rowwise() %>%
dplyr::mutate(collection_lat_long_method_diff = geosphere::distHaversine(c(longitude, latitude),
c(collection_fulcrum_latitude, collection_fulcrum_longitude))) %>%
# rename the latitude and longitude to include 'collection_' prefix
dplyr::ungroup() %>%
dplyr::rename(collection_latitude = latitude,
collection_longitude = longitude)
df1 <- dplyr::full_join(isolation, collection, by = c("c_label_id" = "fulcrum_id")) %>%
#rename the lat and long from fulcrum to collection_fulcrum_latitude and collection_fulcrum_longitude so that we can specify lat and long from exif tool
dplyr::rename(collection_fulcrum_latitude = latitude, collection_fulcrum_longitude = longitude) %>%
dplyr::select(c_label,
everything(),
-c_label_id,
-sample_photo_url) %>%
# Join position data from exif by sample_photo. in some cases there is not position data from the photos
dplyr::left_join(exif) %>%
# Create flag to track if lat and long come from record or photo
dplyr::mutate(collection_lat_long_method = ifelse(is.na(latitude), "fulcrum", "photo")) %>%
# In cases where lat/lon are not available from photo set to collection_fulcrum_latitude and collection_fulcrum_longitude
dplyr::mutate(latitude = ifelse(is.na(latitude), collection_fulcrum_latitude, latitude)) %>%
dplyr::mutate(longitude = ifelse(is.na(longitude), collection_fulcrum_longitude, longitude)) %>%
dplyr::mutate_at(.vars = vars(dplyr::starts_with("gps")),
.funs = funs(as.numeric)) %>%
dplyr::rename(fulcrum_altitude = gps_altitude) %>%
dplyr::mutate(worms_on_sample = ifelse(is.na(worms_on_sample), "?", worms_on_sample)) %>%
dplyr::filter(!is.na(c_label)) %>%
dplyr::select(-assigned_to,
-status,
-Artist) %>%
# Calculate the Haversine distance between fulcrum record_latitude and record_longitue and photo latitude and longitude
dplyr::rowwise() %>%
dplyr::mutate(collection_lat_long_method_diff = geosphere::distHaversine(c(longitude, latitude),
c(collection_fulcrum_latitude, collection_fulcrum_longitude))) %>%
# rename the latitude and longitude to include 'collection_' prefix
dplyr::ungroup() %>%
dplyr::rename(collection_latitude = latitude,
collection_longitude = longitude)
glimpse(df1)
